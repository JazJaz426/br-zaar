import { expect, test } from "@playwright/test";

/**
 * This was generated by default by `npm init playwright@latest` and it demonstrates common test patterns.
 */
test.beforeEach(async({page}) => {
  await page.goto('http://localhost:8000/');
});
test.afterEach(async({page}) => {
  await page.reload();
});
test('type in "search" command before Load, expect to see error message', async ({ page }) => {
    await page.getByLabel('Command input').fill('search 1');
    await page.getByLabel('Submit').click();
    await expect(
        page.getByText(
          "Output: No file loaded"
        )
    ).toBeVisible();
});

test('type in "load" command with wrong /right path expect to see file not loaded or loaded', async ({ page }) => {
    await page.getByLabel('Command input').fill('load wrong/path');
    await page.getByLabel('Submit').click();
    await expect(
        page.getByText(
          "Output: Error happens when parsingjava.io.FileNotFoundException: wrong/path (No such file or directory)"
        )
    ).toBeVisible();
    await page.getByLabel('Command input').fill('load data/census/income_by_race.csv');
    await page.getByLabel('Submit').click();
    await expect(
        page.getByText(
          "Output: File data/census/income_by_race.csv loaded successfully"
        )
    ).toBeVisible();
  });
  test('load file failed with verbose mode', async ({ page }) => {
    await page.getByLabel('Command input').fill('mode');
    await page.getByLabel('Submit').click();
    await page.getByLabel('Command input').fill('load wrong/path');
    await page.getByLabel('Submit').click();
    const commandSelector = '.repl-history p:has-text("Command:")';
    const commands = await page.$$eval
    (commandSelector, elements =>
      elements.map(element => element.textContent)
    );
    const outputSelector = '.repl-history p:has-text("Output:"), .repl-history table';
    const outputs = await page.$$eval
    (outputSelector, elements =>
      elements.map(element => {
        if (element.tagName.toLowerCase() === 'table') {
          return Array.from(element.querySelectorAll('td')).map(td => td.textContent);
        } else {
          return element.textContent;
        }
      })
    );
    expect(commands).toEqual(["Command: mode", "Command: load wrong/path"]);
    expect(outputs).toContain("Output: Switched to verbose mode");
    expect(outputs).toContain("Output: Error happens when parsingjava.io.FileNotFoundException: wrong/path (No such file or directory)");
  });
 
test('type in "search" command after Load, expect to see search results', async ({ page }) => {
    await page.getByLabel('Command input').fill('load data/census/income_by_race.csv header');  
    await page.getByLabel('Submit').click();
    await page.getByLabel('Command input').fill('search 0|0');
    await page.getByLabel('Submit').click();
    let table = await page.getByRole('table');
    await expect(table).toContainText("Kent County, RI");
});

 
test('type in "search" command after Load with col name, expect to see search results', async ({ page }) => {
    await page.getByLabel('Command input').fill('load data/census/income_by_race.csv header');  
    await page.getByLabel('Submit').click();
    await page.getByLabel('Command input').fill('search Native American|Race');
    await page.getByLabel('Submit').click();
    let table = await page.getByRole('table');
    await expect(table).toContainText("Native American");
});

test('type in "search multi" command after Load, expect to see search results', async ({ page }) => {
    await page.getByLabel('Command input').fill('load data/census/income_by_race.csv header');  
    await page.getByLabel('Submit').click();
    await page.getByLabel('Command input').fill('search multi or(and(0_0),and(75857_4))');
    await page.getByLabel('Submit').click();
    let table = await page.getByRole('table');
    await expect(table).toContainText("Kent County, RI");
    await expect(table).toContainText("05000US44003");
});
test('type in "search multi" command with not operator, expect to see search results', async ({ page }) => {
    await page.getByLabel('Command input').fill('load data/census/income_by_race.csv header');  
    await page.getByLabel('Submit').click();
    await page.getByLabel('Command input').fill('search multi or(not(85413_4),and(75857_4)');
    await page.getByLabel('Submit').click();
    let table = await page.getByRole('table');
    await expect(page.getByText(
        "85413"
      )).not.toBeVisible();
    await expect(table).toContainText("75857");
    await expect(table).toContainText("Kent County, RI");
    await expect(table).toContainText("05000US44003");
});
test('search with no arguments', async ({ page }) => {
  await page.getByLabel('Command input').fill('load data/census/income_by_race.csv header');  
  await page.getByLabel('Submit').click();
  await page.getByLabel('Command input').fill('search');
  await page.getByLabel('Submit').click();
  await expect(
    page.getByText("Output: Error: No search val provided for search")
  ).toBeVisible();
});
